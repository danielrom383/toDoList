{"version":3,"sources":["api/Api.ts","components/LoginComponent.tsx","components/CreateUser.tsx","components/AdminPanel.tsx","components/ToDoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["BASE_SERVER_URL","ADMIN_SERVER_URL","APIService","user","axios","post","withCredentials","userID","get","delete","put","USER_SERVER_URL","data","LoginComponent","props","myAPIService","state","username","password","isUsernamedoesntExist","isAlertVisible","isPassVisible","isFormHidden","isUserCreated","isUserCreatedError","isUsernamedoesntExistButton","e","preventDefault","this","setState","login","then","response","console","log","headers","style","margin","textAlign","lineHeight","onSubmit","handleSubmit","className","type","placeholder","onChange","target","value","required","onPointerEnter","seePass","onPointerLeave","Visibility","Component","CreateUser","confirmPassword","userEmail","isUsernameExist","createNewUser","undefined","marginTop","hidden","handleChangeUsername","color","width","fontSize","Error","handleChangePasswordConfirm","to","disabled","onClick","formHandler","AdminPanel","getAllUsers","i","usersArray","deleteAllUsers","deleteUser","scope","map","index","key","pathname","ToDoList","toDoList","queryString","window","location","search","URLSearchParams","getToDoListByUser","getUser","App","history","href","id","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6aa35aea.chunk.js","sourcesContent":["  \r\nimport axios from 'axios';\r\nimport UserInterface from '../interfaces/user.interface';\r\n\r\nconst BASE_SERVER_URL = 'http://localhost:8080/ToDoList';\r\nconst ADMIN_SERVER_URL = 'http://localhost:8080/ToDoList/admin';\r\nconst USER_SERVER_URL = 'http://localhost:8080/ToDoList/user';\r\n\r\n\r\nexport class APIService{\r\n\r\n  isPasswordMatchTheOldPassword(user:any) {\r\n      return axios.post<UserInterface>(BASE_SERVER_URL+`/userLogin`,user);\r\n  }\r\n  \r\n  login(user:any){\r\n    return axios.post<UserInterface>(BASE_SERVER_URL+`/userLogin`,user,{withCredentials:true  });\r\n  }\r\n  getUser(userID:any){\r\n    return axios.get<UserInterface>(BASE_SERVER_URL+`/?userID=${userID}`);\r\n  }\r\n\r\n  deleteUser(userID:any){\r\n    return axios.delete(ADMIN_SERVER_URL+`/deleteUser?userID=${userID}`,{withCredentials:true});\r\n  }\r\n  deleteAllUsers() {\r\n    return axios.delete(ADMIN_SERVER_URL+`/deleteAllUsers`,{withCredentials:true});\r\n  }\r\n\r\n  getAllUsers() {\r\n      return axios.get(ADMIN_SERVER_URL+`/getAllUsers`,{withCredentials:true});\r\n  }\r\n\r\n  updateUser(userID:any){\r\n      return axios.put<UserInterface>(USER_SERVER_URL+`/updateUser`, {withCredentials:true});\r\n  }\r\n\r\n  createNewUser(data : UserInterface){\r\n    return axios.post<UserInterface>(BASE_SERVER_URL+`/createNewUser`, data);\r\n  }\r\n\r\n  isUsernameExist(data:any){\r\n    return axios.post(BASE_SERVER_URL+`/isUsernameExist`, data);\r\n\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { Visibility } from '@material-ui/icons';\r\nimport { APIService } from '../api/Api';\r\n\r\ninterface IState {\r\n    userID?:number;\r\n    username:string;\r\n    password:string;\r\n    isUsernamedoesntExist:boolean;\r\n    isAlertVisible:boolean;\r\n    isPassVisible:string;\r\n    isFormHidden:boolean;\r\n    isUserCreated:boolean;\r\n    isUserCreatedError:boolean;\r\n    isUsernamedoesntExistButton:boolean;\r\n}\r\n\r\nexport const testUser={\r\n    username:\"daniel\",\r\n    password:\"1234\"\r\n}\r\n\r\nexport class LoginComponent extends Component <{}, IState> { \r\n\r\n    myAPIService = new APIService();\r\n    user:any;\r\n    constructor(props: {}, myAPIService:APIService){\r\n        super(props );\r\n        this.state = {\r\n            username:\"\",\r\n            password:\"\",\r\n            isUsernamedoesntExist: true,\r\n            isAlertVisible: true,\r\n            isPassVisible: \"password\",\r\n            isFormHidden: false,\r\n            isUserCreated: true,\r\n            isUserCreatedError: true,\r\n            isUsernamedoesntExistButton: true,\r\n\r\n        }\r\n    }\r\n\r\n    private handleSubmit(e:any){\r\n        e.preventDefault();\r\n        this.setState({\r\n            username: this.state.username,\r\n            password: this.state.password\r\n        })\r\n        this.user = this.state;\r\n        return this.myAPIService.login(this.user).then((response) => {\r\n            console.log(\"response \"+ response.headers);\r\n        });\r\n    }\r\n\r\n    seePass(){\r\n        if(this.state.isPassVisible === \"password\"){\r\n            this.setState({isPassVisible:\"text\"})\r\n        }else{\r\n            this.setState({isPassVisible:\"password\"})\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div >\r\n                <h1>Login Form</h1>\r\n                <form style={{margin: \"5%\" ,textAlign : \"left\", lineHeight: \"0.5\"}} onSubmit={e => this.handleSubmit(e)}>\r\n                    <label >Username</label>\r\n                    <div className=\"input-group mb-3\">\r\n                        <input className=\"form-control\" type=\"text\" placeholder='Enter Username...'  onChange={e => this.setState({username: e.target.value})}  required/>\r\n                    </div>\r\n                    <br/>\r\n                    <br/>\r\n                    <label >Passowrd</label>\r\n                        <div className=\"input-group mb-3\">\r\n                            <input className=\"form-control\" type={this.state.isPassVisible} placeholder='Enter Password...' onChange={e => this.setState({password : e.target.value})} required />\r\n                                <div className=\"input-group-append\">\r\n                                    <span className=\"input-group-text\" onPointerEnter={e=>this.seePass()} onPointerLeave={e=>this.seePass()}>\r\n                                        <Visibility/>\r\n                                    </span>\r\n                                </div>\r\n                            </div>           \r\n                        <br/>\r\n                        <br/>\r\n                    <button className=\"btn btn-primary\" type=\"submit\" >Sign In</button>\r\n                </form >\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LoginComponent;","import React, { Component } from 'react';\r\nimport { APIService } from '../api/Api';\r\nimport { Visibility, Error} from '@material-ui/icons';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface IState {\r\n    userID?:number;\r\n    username:string;\r\n    userEmail:string;\r\n    password:string;\r\n    confirmPassword:string;\r\n    isUsernamedoesntExist:boolean;\r\n    isAlertVisible:boolean;\r\n    isPassVisible:string;\r\n    isFormHidden:boolean;\r\n    isUserCreated:boolean;\r\n    isUserCreatedError:boolean;\r\n    isUsernamedoesntExistButton:boolean;\r\n}\r\n\r\nexport class CreateUser extends Component <{}, IState> { \r\n\r\n    isUsernamedoesntExist: boolean = true;\r\n    myAPIService = new APIService();\r\n\r\n    constructor(props: {}, myAPIService:APIService){\r\n        super(props );\r\n        this.state = {\r\n            username:\"\",\r\n            password:\"\",\r\n            confirmPassword:\"\",\r\n            userEmail:\"\",\r\n            isUsernamedoesntExist: true,\r\n            isAlertVisible: true,\r\n            isPassVisible: \"password\",\r\n            isFormHidden: false,\r\n            isUserCreated: true,\r\n            isUserCreatedError: true,\r\n            isUsernamedoesntExistButton: true,\r\n\r\n        }\r\n    }\r\n\r\n    private formHandler(){\r\n        this.setState({\r\n            isFormHidden: true,\r\n        })\r\n\r\n    }\r\n    private handleChangePasswordConfirm(e:any){\r\n        console.log(e);\r\n        console.log(this.state.isAlertVisible)\r\n        if(e === this.state.password){\r\n            this.setState({isAlertVisible : true});\r\n        }else{\r\n            this.setState({isAlertVisible : false});\r\n        }\r\n    }\r\n\r\n    private handleChangeUsername(e:any){\r\n        \r\n        console.log(e)\r\n        var user = ({username : e});\r\n        return this.myAPIService.isUsernameExist(user).then((response) => {\r\n            if(response.data === false){\r\n                this.setState({isUsernamedoesntExist : true});\r\n                this.setState({isUsernamedoesntExistButton : false});\r\n            }else{\r\n                this.setState({isUsernamedoesntExist : false});\r\n                this.setState({isUsernamedoesntExistButton : true});            \r\n            }\r\n        });\r\n    }\r\n\r\n    private handleSubmit(e:any){\r\n        \r\n        e.preventDefault();\r\n        this.setState({\r\n            username: this.state.username,\r\n            password: this.state.password,\r\n            confirmPassword: this.state.confirmPassword,\r\n            userEmail: this.state.userEmail\r\n        })\r\n        return this.myAPIService.createNewUser(this.state).then((response) => {\r\n                if(response.data.userID !== undefined){\r\n                    this.setState({isUserCreated:false})\r\n                }else{\r\n                    this.setState({isUserCreatedError:false})\r\n                }\r\n        });\r\n    }\r\n\r\n    seePass(){\r\n        if(this.state.isPassVisible === \"password\"){\r\n            this.setState({isPassVisible:\"text\"})\r\n        }else{\r\n            this.setState({isPassVisible:\"password\"})\r\n        }\r\n    }\r\n        \r\n    render() {\r\n        return (\r\n           \r\n            <div className=\"form-group\" style={{lineHeight: \"0.5\"}} >\r\n                <h1>Create User</h1>\r\n                <hr/>\r\n                <br/>\r\n                <form style={{ margin: \"5%\", marginTop: \"0.5rem\" ,textAlign : \"left\", lineHeight: \"0.5\"}} onSubmit={e => this.handleSubmit(e)} hidden={this.state.isFormHidden}>\r\n                    <label >Username</label>\r\n                    <div className=\"input-group mb-3\">\r\n                        <input className=\"form-control\" type=\"text\" placeholder='Enter Username...'  onChange={e => {this.handleChangeUsername(e.target.value);this.setState({username: e.target.value})}}  required/>\r\n                    </div>\r\n                    <div style={{color: \"red\", textAlign: \"left\", width:\"\", lineHeight: \"0\", fontSize: \"14px\"}}  hidden={this.state.isUsernamedoesntExist}>\r\n                        <Error/>username already Exist\r\n                    </div>\r\n                    <br/>\r\n                    <br/>\r\n                    <label >Email</label>\r\n                    <div className=\"input-group mb-3\">\r\n                        <input className=\"form-control\" type=\"text\" placeholder='Enter your email...' onChange={e => this.setState({userEmail : e.target.value})} required/>\r\n                    </div>\r\n                    <br/>\r\n                    <br/>\r\n                    <div className=\"form-row\">\r\n                        <div className=\"col\">\r\n                        <label >Passowrd</label>\r\n                            <div className=\"input-group mb-3\">\r\n                                <input className=\"form-control\" type={this.state.isPassVisible} placeholder='Enter Password...' onChange={e => this.setState({password : e.target.value})} required />\r\n                                    <div className=\"input-group-append\">\r\n                                        <span className=\"input-group-text\" onPointerEnter={e=>this.seePass()} onPointerLeave={e=>this.seePass()}>\r\n                                            <Visibility/>\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <br/>\r\n                            <br/>\r\n                            <div className=\"col\">\r\n                            <label >Confirm Passowrd</label>\r\n                                <div className=\"input-group mb-3\" >\r\n                                    <input className=\"form-control\" type={this.state.isPassVisible} placeholder='Confirm Password...' onChange={e => {this.handleChangePasswordConfirm(e.target.value) ; this.setState({confirmPassword : e.target.value })}} required />\r\n                                </div>\r\n                                    <div style={{color: \"red\", textAlign: \"left\", width:\"\", lineHeight: \"0\", fontSize: \"14px\"}} hidden={this.state.isAlertVisible}><Error></Error>password not match</div>\r\n                                </div>\r\n                            </div>\r\n                            <br/>\r\n                            <br/>\r\n                            <div className=\"form-row justify-content-between\">\r\n                            <Link to={\"/Login\"} className=\"nav-link\">Sign In Instead</Link><button className=\"btn btn-primary\" type=\"submit\" disabled={this.state.isUsernamedoesntExistButton} onClick={e=>this.formHandler()}>Create User</button>\r\n                    \r\n                    </div>\r\n                </form >\r\n                <div style={{color: \"red\", fontSize: \"15%\"}} hidden={this.state.isUserCreatedError}>User Not Created</div>\r\n                <div  hidden={this.state.isUserCreated}>\r\n                    <span style={{color: \"green\" , fontSize: \"42px\"}}> User Created Successfully</span>\r\n                <br/>\r\n                <br/>\r\n                <div className=\"justify-content-center\" >\r\n                <Link className=\"nav-link\" to=\"/\">Return To Home Page</Link>\r\n                <br/>\r\n                <Link className=\"nav-link\" to=\"/\">Login</Link>\r\n                </div>\r\n                </div>\r\n            </div>\r\n          \r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default CreateUser;\r\n","\r\nimport React, { Component } from 'react';\r\nimport { APIService } from '../api/Api';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\ninterface IState {\r\n    userID?:number;\r\n    username:string;\r\n    password:string;\r\n    userEmail:string;\r\n    isUsernamedoesntExist:boolean;\r\n    isAlertVisible:boolean;\r\n    isPassVisible:string;\r\n    isFormHidden:boolean;\r\n    isUserCreated:boolean;\r\n    isUserCreatedError:boolean;\r\n    isUsernamedoesntExistButton:boolean;\r\n    i:number ;\r\n    usersArray:any[];\r\n\r\n\r\n}\r\n\r\nclass AdminPanel extends Component <{}, IState> {\r\n    \r\n    myAPIService = new APIService();\r\n    constructor(props: {}, myAPIService:APIService){\r\n        super(props );\r\n        this.getAllUsers();\r\n        this.state = {\r\n            username:\"?????????\",\r\n            password:\"\",\r\n            userEmail:\"\",\r\n            isUsernamedoesntExist: true,\r\n            isAlertVisible: true,\r\n            isPassVisible: \"password\",\r\n            isFormHidden: false,\r\n            isUserCreated: true,\r\n            isUserCreatedError: true,\r\n            isUsernamedoesntExistButton: true,\r\n            i:0,\r\n            usersArray:[{}],\r\n\r\n        }\r\n        this.state.usersArray[0] = {userID:\"1\",username:\"test\",userEmail:\"test\"};\r\n        this.state.usersArray[2] = {userID:\"2\",username:\"test\",userEmail:\"test\"};\r\n        this.state.usersArray[3] = {userID:\"3\",username:\"test\",userEmail:\"test\"};\r\n        this.state.usersArray[4] = {userID:\"4\",username:\"test\",userEmail:\"test\"};\r\n        \r\n    }\r\n\r\n    private deleteAllUsers(){\r\n        return this.myAPIService.deleteAllUsers();\r\n    }\r\n\r\n    private getAllUsers(){\r\n        return this.myAPIService.getAllUsers().then((response) => {\r\n            this.setState({usersArray : response.data});\r\n            console.log(this.state.usersArray);\r\n        });\r\n        \r\n    }\r\n\r\n    private deleteUser(e:number){\r\n        return this.myAPIService.deleteUser(e);\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            \r\n            <div style={{margin: \"5%\" }}>\r\n                <table className=\"table table-striped table-dark\" >\r\n                    <thead >\r\n                        <tr>\r\n                            <th scope=\"col\">#</th>\r\n                            <th scope=\"col\">User ID</th>\r\n                            <th scope=\"col\">Username</th>\r\n                            <th scope=\"col\">Email</th>\r\n                            <th scope=\"col\">Options</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody >\r\n                    \r\n                    {this.state.usersArray.map(( user, index ) => {\r\n                        let i = index + 1;\r\n          return (\r\n              \r\n            <tr key={index}>\r\n                <td>{i}</td>\r\n                <td>{user.userID}</td>\r\n                <td>{user.username}</td>\r\n                <td>{user.userEmail}</td>\r\n                <td className=\"form-row justify-content-around\"><Link to={{pathname:`/ToDoList?userID=${user.userID}`}}>toDoList</Link><Link className=\"btn btn-primary btn-sm\" to={{pathname:`UpdateUser?userID=${user.userID}`}}>Edit User</Link><button className=\"btn btn-primary btn-sm\" onClick={e=>this.deleteUser(user.userID)}>Delete User</button></td>\r\n            </tr>\r\n          );\r\n        })}\r\n                    </tbody>\r\n                </table>\r\n                <div className=\"form-row justify-content-between\" style={{margin: \"2rem\"}}>\r\n                    <button className=\"btn btn-primary\" onClick={e=>this.getAllUsers()}>Get All Users</button>\r\n                    <button className=\"btn btn-primary\" onClick={e=>this.deleteAllUsers()} >Delete All Users</button>\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n            \r\n        );\r\n        \r\n    }    \r\n}\r\n\r\n\r\nexport default AdminPanel;\r\n","import React, { Component } from 'react'\r\nimport { APIService } from '../api/Api';\r\nimport UserInterface from '../interfaces/user.interface';\r\n\r\ninterface IState{\r\n    user:UserInterface;\r\n    toDoList:string[];\r\n}\r\n\r\nexport class ToDoList extends Component <{},IState> {\r\n\r\n    myAPIService = new APIService();\r\n\r\n    constructor(props: {},myAPIService:APIService){\r\n        super(props );\r\n        this.state={\r\n            user:{userID:1,username:\"daniel\",toDoList:[]},\r\n            toDoList:[\"das\",\"dsa\",\"gfed\"],\r\n        };\r\n        \r\n    }\r\n\r\n    componentDidMount(){\r\n        const queryString = window.location.search;\r\n        console.log(queryString);\r\n        const urlParams = new URLSearchParams(queryString);\r\n        const userID = urlParams.get('userID')\r\n        console.log(userID);\r\n        this.getToDoListByUser(userID);\r\n        console.log(this.state.user)\r\n    }\r\n    private getToDoListByUser(userID:any){\r\n        return this.myAPIService.getUser(userID).then((response) => {\r\n            this.setState({toDoList : response.data.toDoList!});\r\n            console.log(this.state.toDoList);\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>{this.state.user}</h1>\r\n                <table className=\"table table-striped table-dark\" >\r\n                    <thead >\r\n                        <tr>\r\n                            <th scope=\"col\">#</th>\r\n                            <th scope=\"col\">To Do</th>\r\n                            <th scope=\"col\">Options</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody >\r\n                    \r\n                    {this.state.toDoList.map(( toDoList, index  ) => {\r\n                        let i = index + 1;\r\n          return (\r\n              \r\n            <tr key={index}>\r\n                <td>{i}</td>\r\n                <td>{}</td>\r\n                \r\n                {/* <td className=\"form-row justify-content-around\"><button className=\"btn btn-primary btn-sm\" >Edit User</button><button className=\"btn btn-primary btn-sm\" onClick={e=>this.deleteUser(user.userID)}>Delete User</button></td> */}\r\n            </tr>\r\n          );\r\n        })}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToDoList;\r\n","import React from 'react';\nimport './App.css';\nimport { LoginComponent } from './components/LoginComponent';\nimport CreateUser from './components/CreateUser';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Router, Switch, Route, Link, useHistory as history} from \"react-router-dom\";\nimport AdminPanel from './components/AdminPanel';\nimport ToDoList from './components/ToDoList';\n// import { UpdateUser } from './components/UpdateUser';\n\n\nfunction App() {\n\n  return (\n    <Router history={history()} >\n            \n                <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n            <a href=\"/Home\" className=\"navbar-brand\">\n              To Do List\n            </a>\n            <div className=\"navbar-nav mr-auto\">\n              <li className=\"nav-item\">\n                <Link to={\"/Login\"} className=\"nav-link\">\n                Login\n                </Link>\n              </li>\n              <li className=\"nav-item\">\n                <Link to={\"/CreateUser\"} className=\"nav-link\">\n                Create User\n                </Link>\n              </li>\n            </div>\n          </nav>\n            <div id=\"App-content\">\n            <Switch >\n                <Route exact path={[\"/\", \"/Home\"]} /> \n                <Route path=\"/Login\" exact component={LoginComponent} />\n                <Route path=\"/CreateUser\" exact component={CreateUser}/>\n                <Route path=\"/AdminPanel\" exact component={AdminPanel}/>\n                <Route path=\"/ToDoList:userID\" exact component={ToDoList}/>\n                {/* <Route path=\"/UpdateUser\" exact component={UpdateUser}/> */}\n            </Switch>\n            </div>\n    </Router>\n\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter > \n    <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}